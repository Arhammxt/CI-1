#!/bin/bash
#
# Kizuna Kernel Build Automated Trigger Script || For Continous Integration
#
# Copyright 2019, alanndz <alanmahmud0@gmail.com>
# Copyright 2020, Dicky Herlambang "Nicklas373" <herlambangdicky5@gmail.com>
# Copyright 2016-2020, HANA-CI Build Project
# SPDX-License-Identifier: GPL-3.0-or-later

function init() {
# Begin decision
echo "Which CI services that you want to use ?"
echo ""
echo "1. Circle-CI"
echo "2. Semaphore-CI"
echo "3. Drone-CI"
echo ""
echo "NOTE: Write number only!"
read -s decision

if [ "$decision" == "1" ];
	then
		bot="Circle-CI"
elif [ "$decision" == "2" ];
	then
		bot="Semaphore-CI"
elif [ "$decision" == "3" ];
	then
		bot="Drone-CI"
fi

# Run next step
kdev
}

function kdev() {
echo ""
echo "Which devices that you want to compile ?"
echo ""
echo "1. Xiaomi Redmi Note 4x"
echo "2. Xiaomi Redmi Note 7"
echo ""
echo "NOTE: Write number only!"
read -s kdev

if [ "$kdev" == "1" ];
	then
		devices="Xiaomi Redmi Note 4x"
elif [ "$kdev" == "2" ];
	then
		devices="Xiaomi Redmi Note 7"
fi

# Run next step
kname
}

function kname() {
if [ "$kdev" == "1" ];
	then
		echo ""
		echo "Which kernel that you want to compile ?"
		echo ""
		echo "1. CAF Kernel"
		echo "2. Kizuna Kernel"
		echo ""
		echo "NOTE: Write number only!"
		read -s kname

		if [ "$kname" == "1" ];
			then
				name="CAF Kernel"
				overclock="0"
				clock="false"
				undervolt="0"
				s_uv="false"
				g_clock="0"
				gpu_clock="false"
		elif [ "$kname" == "2" ];
			then
				name="Kizuna Kernel"
				echo ""
				echo "Overclock Version ?"
				echo "1. Yes"
				echo "2. No"
				echo ""
				echo "NOTE: Write number only!"
				read -s oc

				if [ "$oc" == "1" ];
					then
						overclock="1"
						clock="true"
						g_clock="1"
						gpu_clock="true"

						echo ""
						echo "Undervolt Version ?"
						echo "1. Yes"
						echo "2. No"
						echo ""
						echo "NOTE: Write number only!"
						read -s uv

						if [ "$uv" == "1" ];
							then
								undervolt="1"
								s_uv="true"
								g_clock="0"
								gpu_clock="false"
						elif [ "$uv" == "2" ];
							then
								undervolt="0"
								s_uv="false"
								g_clock="1"
								gpu_clock="true"
						fi
				elif [ "$oc" == "2" ];
					then
						overclock="0"
						clock="false"
						g_clock="0"
						gpu_clock="false"

						echo ""
						echo "Undervolt Version ?"
						echo "1. Yes"
						echo "2. No"
						echo ""
						echo "NOTE: Write number only!"
						read -s uv

						if [ "$uv" == "1" ];
							then
								undervolt="1"
								s_uv="true"
						elif [ "$uv" == "2" ];
							then
								undervolt="0"
								s_uv="false"
						fi
				fi
		fi
elif [ "$kdev" == "2" ];
	then
		echo ""
		name="Fusion Kernel"
		echo "Fusion Kernel (@Alanndz & Nicklas373)"
		echo ""
		echo "Overclock Version ?"
		echo "1. Yes"
		echo "2. No"
		echo ""
		echo "NOTE: Write number only!"
		read -s oc

		if [ "$oc" == "1" ];
			then
				overclock="1"
				clock="true"
		elif [ "$oc" == "2" ];
			then
				overclock="0"
				clock="false"
		fi

		undervolt="0"
		s_uv="false"
		g_clock="0"
		gpu_clock="false"

		echo ""
		echo "Use Common Touchscreen nodes ?"
		echo ""
		echo "1. Yes"
		echo "2. No"
		echo ""
		echo "NOTE: Write Number only!"
		read -s ts_node

		if [ "$ts_node" == "1" ];
			then
				ts_common="1"
		elif [ "$ts_node" == "2" ];
			then
				ts_common="2"
		fi
fi

# Run next step
krelease
}

function krelease() {
echo ""
echo "Which release type that you want to compile ?"
echo ""
echo "1. Stable"
echo "2. BETA"
echo ""
echo "NOTE: Write number only!"
read -s krelease

if [ "$krelease" == "1" ];
	then
		release="Stable"
elif [ "$krelease" == "2" ];
	then
		release="BETA"
fi

# Run next step
kversion
}

function kversion() {
echo ""
echo "Select your android version"
echo "1. 10"
echo "2. 11"
echo ""
echo "NOTE: Write number only !"
read -s version_avr

if [ "$version_avr" == "1" ];
	then
		avr="0"
		avr_str="Android 10.0"
elif [ "$version_avr" == "2" ];
	then
		avr="1"
		avr_str="Android 11.0"
fi

# Run next step
clang
}

function clang() {
echo ""
echo "Select your compiler :3"
echo ""
echo "1. Proton Clang 12"
echo "2. AOSP Clang + GCC 4.9 (Non-elf)"
echo "3. SDCLANG 10.0.9 + GCC 4.9 (Non-elf)"
echo "4. SDCLANG 8.0.12 + GCC 4.9 (Non-elf)"
echo ""
echo "NOTE: Write number only !"
read -s clang

if [ "$clang" == "1" ];
	then
		comp="1"
		ext_clang="Proton Clang 12"
elif [ "$clang" == "2" ];
	then
		comp="2"
		ext_clang="AOSP Clang + GCC 4.9 (Non-elf)"
elif [ "$clang" == "3" ];
	then
		comp="3"
		ext_clang="SDCLANG 10.0.9 + GCC 4.9 (Non-elf)"
fi

# Run next step
main
}

function main() {
# Show user option
echo ""
echo "========================================="
echo "| Your selection			|"
echo "|					|"
echo "| CI Services	: $bot		|"
echo "| Devices	: $devices	|"
echo "| Kernel	: $name		|"
echo "| Release	: $release			|"
echo "| Android Ver	: $avr_str		|"
echo "| Ext Clang	: $ext_clang	|"
echo "| CPU Overclock	: $clock			|"
echo "| GPU Overclock	: $gpu_clock			|"
echo "| Undervolt	: $s_uv			|"
echo "|					|"
echo "| is this right option ?		|"
echo "|					|"
echo "| 1. Yes				|"
echo "| 2. No					|"
echo "|					|"
echo "| NOTE: Write number only!		|"
echo "========================================="
read -s user

# Configuring CI
if [ "$user" == "2" ];
	then
		echo "See ya"
		exit 1
elif [ "$user" == "1" ];
	then
		echo "Configuring CI Script"
		if [ "$decision" == "1" ];
			then
				sed -i -e 's/KERNEL_CI_SERVICE=0/KERNEL_CI_SERVICE=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CI_SERVICE=2/KERNEL_CI_SERVICE=1/g'  ~/CI/ci
		elif [ "$decision" == "2" ];
			then
				sed -i -e 's/KERNEL_CI_SERVICE=0/KERNEL_CI_SERVICE=2/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CI_SERVICE=1/KERNEL_CI_SERVICE=2/g'  ~/CI/ci
		elif [ "$decision" == "3" ];
			then
				sed -i -e 's/KERNEL_CI_SERVICE=2/KERNEL_CI_SERVICE=0/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CI_SERVICE=1/KERNEL_CI_SERVICE=0/g'  ~/CI/ci
		fi
		if [ "$kname" == "1" ];
			then
				sed -i -e 's/KERNEL_NAME=1/KERNEL_NAME=0/g'  ~/CI/ci
				sed -i -e 's/KERNEL_NAME=2/KERNEL_NAME=0/g'  ~/CI/ci
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ~/CI/ci
		elif [ "$kname" == "2" ];
			then
				sed -i -e 's/KERNEL_NAME=0/KERNEL_NAME=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_NAME=2/KERNEL_NAME=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ~/CI/ci
		elif [ "$kname" == "3" ];
			then
				sed -i -e 's/KERNEL_NAME=0/KERNEL_NAME=2/g'  ~/CI/ci
				sed -i -e 's/KERNEL_NAME=1/KERNEL_NAME=2/g'  ~/CI/ci
				sed -i -e 's/KERNEL_SCHED=0/KERNEL_SCHED=1/g'  ~/CI/ci
		fi
		if [ "$avr" == "0" ];
			then
				sed -i -e 's/KERNEL_AVR=1/KERNEL_AVR=0/g' ~/CI/ci
				sed -i -e 's/KERNEL_AVR=2/KERNEL_AVR=0/g' ~/CI/ci
		elif [ "$avr" == "1" ];
			then
				sed -i -e 's/KERNEL_AVR=0/KERNEL_AVR=1/g' ~/CI/ci
				sed -i -e 's/KERNEL_AVR=2/KERNEL_AVR=1/g' ~/CI/ci
		fi
		if [ "$kdev" == "1" ];
			then
				sed -i -e 's/KERNEL_CODENAME=1/KERNEL_CODENAME=0/g'  ~/CI/ci
				sed -i -e 's/git clone --depth=1 -b fusion-nothing https://HANA-CI-Build-Project:$TOKEN@github.com/HANA-CI-Build-Project/kernel_xiaomi_lavender-4.4 . /#git clone --depth=1 -b fusion-nothing https://Nicklas373:$git_token@github.com/Nicklas373/kernel_xiaomi_lavender-4.4 . /g' ~/build_kernel/.circleci/build.sh
		elif [ "$kdev" == "2" ];
			then
				sed -i -e 's/KERNEL_CODENAME=0/KERNEL_CODENAME=1/g'  ~/CI/ci
				sed -i -e 's/#git clone --depth=1 -b fusion-nothing https://HANA-CI-Build-Project:$TOKEN@github.com/HANA-CI-Build-Project/kernel_xiaomi_lavender-4.4 . /git clone --depth=1 -b fusion-nothing https://Nicklas373:$git_token@github.com/Nicklas373/kernel_xiaomi_lavender-4.4 . /g' ~/build_kernel/.circleci/build.sh
				echo ""
				echo "Want to use custom cam ?"
				echo "1. yes"
				echo "2. no"
				echo "NOTE: Choose number only! "
				read -s cam
				if [ "$cam" == "1" ];
					then
						sed -i -e 's/KERNEL_NEW_CAM=0/KERNEL_NEW_CAM=1/g'  ~/CI/ci
				elif [ "$cam" == "2" ];
					then
						sed -i -e 's/KERNEL_NEW_CAM=1/KERNEL_NEW_CAM=0/g'  ~/CI/ci
				fi
		fi
		sed -i -e 's/KERNEL_AND_VER=2/KERNEL_AND_VER=1/g'  ~/CI/ci
		sed -i -e 's/KERNEL_AND_VER=0/KERNEL_AND_VER=1/g'  ~/CI/ci
		if [ "$krelease" == "1" ];
			then
				sed -i -e 's/KERNEL_STATE=0/KERNEL_STATE=1/g'  ~/CI/ci
		elif [ "$krelease" == "2" ];
			then
				sed -i -e 's/KERNEL_STATE=1/KERNEL_STATE=0/g'  ~/CI/ci
		fi
		if [ "$comp" == "1" ];
			then
				sed -i -e 's/KERNEL_GCC=1/KERNEL_GCC=0/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=1/KERNEL_CLANG=0/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=2/KERNEL_CLANG=0/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=3/KERNEL_CLANG=0/g'  ~/CI/ci
		elif [ "$comp" == "2" ];
			then
				sed -i -e 's/KERNEL_GCC=0/KERNEL_GCC=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=0/KERNEL_CLANG=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=2/KERNEL_CLANG=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=3/KERNEL_CLANG=1/g'  ~/CI/ci
		elif [ "$comp" == "3" ];
			then
				sed -i -e 's/KERNEL_GCC=0/KERNEL_GCC=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=0/KERNEL_CLANG=2/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=1/KERNEL_CLANG=2/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=3/KERNEL_CLANG=2/g'  ~/CI/ci
		elif [ "$comp" == "4" ];
			then
				sed -i -e 's/KERNEL_GCC=0/KERNEL_GCC=1/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=0/KERNEL_CLANG=3/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=1/KERNEL_CLANG=3/g'  ~/CI/ci
				sed -i -e 's/KERNEL_CLANG=2/KERNEL_CLANG=3/g'  ~/CI/ci
		fi
		if [ "$kdev" == "1" ];
			then
				if [ "$overclock" == "1" ] && [ "$undervolt" == "1" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=0/KERNEL_OVERCLOCK=1/g'	~/CI/ci
						sed -i -e 's/KERNEL_UNDERVOLT=0/KERNEL_UNDERVOLT=1/g'   ~/CI/ci
				elif [ "$overclock" == "0" ] && [ "$undervolt" == "0" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=1/KERNEL_OVERCLOCK=0/g'   ~/CI/ci
						sed -i -e 's/KERNEL_UNDERVOLT=1/KERNEL_UNDERVOLT=0/g'   ~/CI/ci
				elif [ "$overclock" == "0" ] && [ "$undervolt" == "1" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=1/KERNEL_OVERCLOCK=0/g'	~/CI/ci
						sed -i -e 's/KERNEL_UNDERVOLT=0/KERNEL_UNDERVOLT=1/g'   ~/CI/ci
				elif [ "$overclock" == "1" ] && [ "$undervolt" == "0" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=0/KERNEL_OVERCLOCK=1/g'   ~/CI/ci
						sed -i -e 's/KERNEL_UNDERVOLT=1/KERNEL_UNDERVOLT=0/g'	~/CI/ci
				fi
		elif [ "$kdev" == "2" ];
			then
				if [ "$overclock" == "0" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=1/KERNEL_OVERCLOCK=0/g'   ~/CI/ci
				elif [ "$overclock" == "1" ];
					then
						sed -i -e 's/KERNEL_OVERCLOCK=0/KERNEL_OVERCLOCK=1/g'   ~/CI/ci
				fi

				sed -i -e 's/KERNEL_UNDERVOLT=0/KERNEL_UNDERVOLT=0/g'   ~/CI/ci

				if [ "$ts_common" == "0" ];
					then
						sed -i -e 's/KERNEL_LAVENDER_TS_COMMON=1/KERNEL_LAVENDER_TS_COMMON=0/g'		~/CI/ci
				elif [ "$ts_common" == "1" ];
					then
						sed -i -e 's/KERNEL_LAVENDER_TS_COMMON=0/KERNEL_LAVENDER_TS_COMMON=1/g'		~/CI/ci
				fi
		fi

		echo "Triggering CI"

		# Trigger script earlier
		trigger_script

		if [ "$decision" == "1" ];
			then
				echo "Push to Circle-CI"
				cd ~/build_kernel
		elif [ "$decision" == "2" ];
			then
				echo "Push to Semaphore-CI"
				cd ~/Semaphore-CI
		elif [ "$decision" == "3" ];
			then
				echo "Push to Drone-CI"
				cd ~/Drone-CI
		fi

		# Trigger CI
		trigger_ci
fi
}

function trigger_script() {
git add .
git commit -m "ci: trigger: Automated Trigger CI" -s
git push origin CI
}

function trigger_ci() {
git commit --allow-empty -am "ci: trigger: Automated Trigger CI" -s
git push -f
}

# run main
init
