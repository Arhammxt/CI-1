#!bin/bash
#
# HANA-CI Kernel Build Script || For Continous Integration
#
# Copyright 2019, Ahmad Thoriq Najahi "Najahiii" <najahiii@outlook.co.id>
# Copyright 2019, alanndz <alanmahmud0@gmail.com>
# Copyright 2020, Dicky Herlambang "Nicklas373" <herlambangdicky5@gmail.com>
# Copyright 2016-2020, HANA-CI Build Project
# SPDX-License-Identifier: GPL-3.0-or-later

# CI Script Revision = 20201206

# Build Information
#
# Kernel Name
# 0 = CAF (Stock Based Kernel) || 1 = Kizuna (Clarity Next-Gen) || 2 Fusion (Co-operate with @alanndz)
#
# Kernel Scheduler
# 0 = HMP || 1 = EAS
#
# Kernel State
# 0 = BETA || 1 = Stable
#
# Android Version // AVR
# 0 = 10.0 || 1 = 11.0 || 2 = 9.0 - 10.0
#
# Kernel Codename
# 0 = Mido || 1 = Lavender
#
# Kernel Compiler
# 0 = Proton Clang 12 || 1 = AOSP Clang + GCC 4.9 (Non-elf)
#
# CI Service
# 0 = Drone CI || 1 = Circle CI || 2 = Semaphore CI
#
# Kernel Overclock
# 0 = Non-OC || 1 = OC
#
# Kernel Undervolt
# 0 = Non-UV || 1 = UV
#
# Lavender Cam Patch
# 0 = Old cam || 1 = New cam
#
# Lavender NLMK Patch Disabler
# 0 = Disable || 1 = Enable
#
# Declare Kernel Details
KERNEL_NAME=1
KERNEL_SCHED=1
KERNEL_STATE=0
KERNEL_AND_VER=1
KERNEL_AVR=1
KERNEL_CODENAME=0
KERNEL_COMPILER=0
KERNEL_CI_SERVICE=1
KERNEL_NEW_CAM=0
KERNEL_OVERCLOCK=0
KERNEL_UNDERVOLT=0

# Environment init
function env_init() {

# Set ARCH
export ARCH=arm64
export SUBARCH=arm64

# Set CI Service
if [ "$KERNEL_CI_SERVICE" == "0" ];
	then
		KERNEL_BOT="Drone-CI"
elif [ "$KERNEL_CI_SERVICE" == "1" ];
	then
		KERNEL_BOT="Circle-CI"
elif [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		KERNEL_BOT="Semaphore-CI"
fi
}

# Mido init
function mido_init() {

# Create Temporary Folder
mkdir TEMP

# Clone source for specific kernel name
if [ "$KERNEL_NAME" == "0" ];
	then
		if [ "$KERNEL_CI_SERVICE" == "0" ] || [ "$KERNEL_CI_SERVICE" == "1" ];
			then
				# Import github token
				TOKEN=${token}
				echo $TOKEN
		elif [ "$KERNEL_CI_SERVICE" == "2" ];
			then
				# Import github token
				TOKEN=${git_token}
				echo $TOKEN
		fi

		# Clone kernel repositories earlier
		git clone --depth=1 -b lineage-17.1 https://github.com/Nicklas373/kernel_xiaomi_msm8953-4.9 kernel

		# Define Kernel Specific Tag
		KERNEL_CAF_TAG="LA.UM.9.6.2.r1-03600-89xx.0"

		# Cloning AnyKernel Repository
		git clone --depth=1 -b caf/mido-4.9 https://github.com/Nicklas373/AnyKernel3

		# Define Kernel Specific Environment
		KERNEL_SCHED="EAS"
		KERNEL_BRANCH="lineage-17.1"
		KERNEL_REV="r7"
		KERNEL_REL="CAF"
		KERNEL_RELEASE_NAME="キズナ～"
elif [ "$KERNEL_NAME" == "1" ];
	then

		if [ "$KERNEL_CI_SERVICE" == "0" ] || [ "$KERNEL_CI_SERVICE" == "1" ];
			then
				# Import github token
				TOKEN=${token}
				echo $TOKEN
		elif [ "$KERNEL_CI_SERVICE" == "2" ];
			then
				# Import github token
				TOKEN=${git_token}
				echo $TOKEN
		fi

		if [ "$KERNEL_STATE" == "0" ];
			then
				# Clone kernel repositories earlier
				git clone --depth=1 -b staging/kizuna https://HANA-CI-Build-Project:$TOKEN@github.com/HANA-CI-Build-Project/msm-4.9 kernel

				# Define Kernel Specific Tag
				KERNEL_CAF_TAG="LA.UM.9.6.2.r1-03600-89xx.0"

		elif [ "$KERNEL_STATE" == "1" ];
			then
				# Clone kernel repositories earlier
                                git clone --depth=1 -b kizuna https://HANA-CI-Build-Project:$TOKEN@github.com/HANA-CI-Build-Project/msm-4.9 kernel

				# Define Kernel Specific Tag
                                KERNEL_CAF_TAG="LA.UM.9.6.2.r1-03600-89xx.0"
		fi

		# Cloning AnyKernel Repository
		git clone --depth=1 -b caf/mido-kizuna-4.9 https://github.com/Nicklas373/AnyKernel3

		# Define Kernel Specific Environment
		KERNEL_SCHED="EAS"
		if [ "$KERNEL_STATE" == "0" ];
			then
				KERNEL_BRANCH="staging/kizuna"
		elif [ "$KERNEL_STATE" == "1" ];
			then
				KERNEL_BRANCH="kizuna"
		fi
		KERNEL_RELEASE_NAME="~ Kanata ~"
		KERNEL_REV="r6"
		KERNEL_REL="Kizuna"
fi

# Define CI Specific Environment
export KBUILD_BUILD_USER=Kasumi
export KBUILD_BUILD_HOST=${KERNEL_BOT}

# Define Global Environment for Mido
IMAGE="$(pwd)/kernel/out/arch/arm64/boot/Image.gz-dtb"
KERNEL="$(pwd)/kernel"
KERNEL_TEMP="$(pwd)/TEMP"
if [ "$KERNEL_OVERCLOCK" == "1" ] && [ "$KERNEL_UNDERVOLT" == "0" ];
	then
		KERNEL_CLOCK="OC"
		KERNEL_CLK_STR="Overclock"
		KERNEL_DEVICE="CPU | GPU"
elif [ "$KERNEL_OVERCLOCK" == "0" ] && [ "$KERNEL_UNDERVOLT" == "1" ];
	then
		KERNEL_CLOCK="UV"
		KERNEL_CLK_STR="Undervolt"
		KERNEL_DEVICE="CPU"
elif [ "$KERNEL_OVERCLOCK" == "1" ] && [ "$KERNEL_UNDERVOLT" == "1" ];
	then
		KERNEL_CLOCK="OC-UV"
		KERNEL_CLK_STR="Overclock & Undervolt"
		KERNEL_DEVICE="CPU"
else
	KERNEL_CLOCK=""
	KERNEL_CLK_STR="Default"
	KERNEL_DEVICE=""
fi
CODENAME="mido"
KERNEL_CODE="Mido"
TELEGRAM_DEVICE="Xiaomi Redmi Note 4x"

# Define Kernel Release State
if [ "$KERNEL_STATE" == "1" ];
	then
		KERNEL_RELEASE="Stable"
elif [ "$KERNEL_STATE" == "0" ];
	then
		KERNEL_RELEASE="BETA"
fi

# Define Kernel Telegram Channel Aliases
if [ "$KERNEL_CI_SERVICE" == "0" ];
	then
		TELEGRAM_BOT_ID=${tg_bot_id}
		if [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${tg_channel_id}
		elif [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${tg_group_id}
		fi
elif [ "$KERNEL_CI_SERVICE" == "1" ] || [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		TELEGRAM_BOT_ID=${telegram_bot_id}
		if [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_official_id}
		elif [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_dev_id}
		fi
fi
}

# Lavender init
function lave_init() {
if [ "$KERNEL_CI_SERVICE" == "0" ];
	then
		# Import github token
		TOKEN=${token}
		echo $TOKEN

		# Downloading kernel source
		git clone --depth=1 -b fusion-nodebug https://HANA-CI-Build-Project:$TOKEN@github.com/HANA-CI-Build-Project/kernel_xiaomi_lavender-4.4 kernel

elif [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		# Import github token
		TOKEN=${git_token}
		echo $TOKEN

		# Downloading kernel source
		git clone --depth=1 -b fusion-nodebug https://HANA-CI-Build-Project:$TOKEN@github.com/HANA-CI-Build-Project/kernel_xiaomi_lavender-4.4 kernel
fi

# Cloning AnyKernel Repository
git clone --depth=1 -b fusion https://github.com/alanndz/AnyKernel3 AnyKernel3

# Create Temporary Folder
mkdir TEMP

# Define Kernel Scheduler
KERNEL_SCHED="EAS"
KERNEL_BRANCH="fusion-nothing-rework"

# Define CI Specific Environment
export KBUILD_BUILD_USER=alanndz-nicklas373
export KBUILD_BUILD_HOST=fusion_lavender-Dev

# Define Lavender Specific Environment
if [ "$KERNEL_CI_SERVICE" == "0" ] || [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		KERNEL="$(pwd)/kernel"
		IMAGE="$(pwd)/kernel/out/arch/arm64/boot/Image.gz-dtb"
elif [ "$KERNEL_CI_SERVICE" == "1" ];
	then
		KERNEL="$(pwd)"
		IMAGE="$(pwd)/out/arch/arm64/boot/Image.gz-dtb"
fi
ANYKERNEL="$(pwd)/AnyKernel3"
KERNEL_TEMP="$(pwd)/TEMP"
CODENAME="lavender"
KERNEL_CODE="Lavender"
if [ "$KERNEL_OVERCLOCK" == "1" ];
	then
		KERNEL_CLOCK="OC"
fi
TELEGRAM_DEVICE="Xiaomi Redmi Note 7"
KERNEL_REV="r7"
if [ "$KERNEL_OVERCLOCK" == "0" ];
	then
		KERNEL_REL="Fusion"
elif [ "$KERNEL_OVERCLOCK" == "1" ];
	then
		KERNEL_REL="Fusion-OC"
fi

# Define Telegram Channel Release Environment
if [ "$KERNEL_CI_SERVICE" == "1" ] || [ "$KERNEL_CI_SERVICE" == "2" ];
	then
		TELEGRAM_BOT_ID=${telegram_bot_id}
		if [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${telegram_group_dev_id}
		elif [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${telegram_fusion_id}
		fi
elif [ "$KERNEL_CI_SERVICE" == "0" ];
	then
		TELEGRAM_BOT_ID=${tg_bot_id}
		if [ "$KERNEL_STATE" == "0" ];
			then
				TELEGRAM_GROUP_ID=${tg_group_id}
		elif [ "$KERNEL_STATE" == "1" ];
			then
				TELEGRAM_GROUP_ID=${telegram_fusion_id}
		fi
fi

# Declare Kernel Release State
if [ "$KERNEL_STATE" == "1" ];
	then
		KERNEL_RELEASE="Stable"
		FUSION_CODENAME="Lord_Paramount"
		KERNEL_VERSION="r9"
		KVERSION="${FUSION_CODENAME}-${KERNEL_VERSION}"
		ZIP_NAME="${KERNEL_REL}-${KVERSION}-${CODENAME}-$(date "+%H%M-%d%m%Y").zip"
elif [ "$KERNEL_STATE" == "0" ];
	then
		KERNEL_RELEASE="BETA"
		FUSION_CODENAME="Lord_Paramount"
		KERNEL_VERSION="r9"
		KVERSION="${FUSION_CODENAME}-${KERNEL_VERSION}"
		ZIP_NAME="${KERNEL_REL}-${KVERSION}-${CODENAME}-$(date "+%H%M-%d%m%Y").zip"

		if [ "$KERNEL_CI_SERVICE" == "2" ];
			then
				# Switch to root directory
				cd /root/kernel
		elif [ "$KERNEL_CI_SERVICE" == "0" ];
			then
				# Switch to kernel directory
				cd kernel
		fi
fi
}

# Additional init environment
function add_init() {

# Declare global additional environment
KERNEL_SUFFIX="Kernel"
KERNEL_DATE="$(date +%Y%m%d-%H%M)"

# Declare Android Version
if [ "$KERNEL_AND_VER" == "0" ];
	then
		KERNEL_ANDROID_VER="9"
		KERNEL_TAG="P"
elif [ "$KERNEL_AND_VER" == "1" ];
	then
		if [ "$KERNEL_AVR" == "0" ];
			then
				KERNEL_ANDROID_VER="10"
				KERNEL_TAG="Q"
		elif [ "$KERNEL_AVR" == "1" ];
			then
				KERNEL_ANDROID_VER="11"
				KERNEL_TAG="R"
		fi
elif [ "$KERNEL_AND_VER" == "2" ];
	then
		KERNEL_ANDROID_VER="9-10"
		KERNEL_TAG="P-Q"
fi

# Declare Telegram File Environment
TELEGRAM_FILENAME="${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"
export TELEGRAM_SUCCESS="CAACAgEAAx0CSp9MtQABBEjFX9VtGvPTMhgokFvqQLFDvYDqbgIAAqkAAyQIgUVzkLgBnPXQ4h4E"
export TELEGRAM_FAIL="CAACAgEAAx0CSp9MtQABBEjCX9Vs9JSeG9aAsei2MzYTIfWdOMMAAsYAA9pAgEVorUReGk7A2h4E"
}

# Cloning Clang
function clang_init() {

if [ "$KERNEL_COMPILER" == "0" ];
	then
		# Clang environment
		export CLANG_PATH=/root/proton/bin
		export PATH=${CLANG_PATH}:${PATH}
		export LD_LIBRARY_PATH="/root/proton/bin/../lib:$PATH"
elif [ "$KERNEL_COMPILER" == "1" ];
	then
		# Clang environment
		export CLANG_PATH=/root/aosp-clang/bin
		export PATH=${CLANG_PATH}:${PATH}
		export LD_LIBRARY_PATH="/root/aosp-clang/bin/../lib:$PATH"
		export CROSS_COMPILE=/root/gcc-4.9_64/arm64/bin/aarch64-linux-android-
		export CROSS_COMPILE_ARM32=/root/gcc-4.9/arm/bin/arm-linux-androideabi-
fi
}

# Declare Telegram Bot Aliases
function telegram_init() {
TELEGRAM_KERNEL_VER=$(cat ${KERNEL}/out/.config | grep Linux/arm64 | cut -d " " -f3)
TELEGRAM_UTS_VER=$(cat ${KERNEL}/out/include/generated/compile.h | grep UTS_VERSION | cut -d '"' -f2)
TELEGRAM_COMPILER_NAME=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILE_BY | cut -d '"' -f2)
TELEGRAM_COMPILER_HOST=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILE_HOST | cut -d '"' -f2)
TELEGRAM_TOOLCHAIN_VER=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILER | cut -d '"' -f2)
}

# Telegram Bot Service || Compiling Notification
function bot_template() {
curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage -d chat_id=${TELEGRAM_GROUP_ID} -d "parse_mode=HTML" -d text="$(
	for POST in "${@}";
		do
			echo "${POST}"
		done
	)"
}

# Telegram Bot Service || Compiling Message
function bot_first_compile() {
	bot_template	"<b>|| HANA-CI Build Bot ||</b>" \
			"" \
			"<b>${KERNEL_REL} ${KERNEL_CLOCK} Kernel build Start!</b>" \
			"" \
			"============= Build Information ================" \
			"<b>Build Status :</b><code> ${KERNEL_RELEASE} </code>" \
			"<b>Device :</b><code> ${TELEGRAM_DEVICE} </code>" \
			"<b>Android Version :</b><code> ${KERNEL_ANDROID_VER} </code>" \
			"" \
			" =========== Kernel Information ================" \
			"<b>Kernel Scheduler : </b><code> ${KERNEL_SCHED} </code>" \
			"<b>Kernel Clock : </b><code> ${KERNEL_CLK_STR} ${KERNEL_DEVICE} </code>" \
			"<b>Kernel Tag : </b><code> ${KERNEL_CAF_TAG} </code>" \
			"<b>Kernel Branch : </b><code> ${KERNEL_BRANCH} </code>" \
			"<b>Kernel Commit : </b><code> $(git --no-pager log --pretty=format:'"%h - %s (%an)"' -1) </code>"
}

# Telegram bot message || complete compile notification
function bot_complete_compile() {
	telegram_init
	bot_template	"<b>|| HANA-CI Build Bot ||</b>" \
			"" \
			"<b>New ${KERNEL_REL} ${KERNEL_CLOCK} Kernel Build Is Available!</b>" \
			"" \
			"============ Build Information ================" \
			"<b>Build Status :</b><code> ${KERNEL_RELEASE} </code>" \
			"<b>Device :</b><code> ${TELEGRAM_DEVICE} </code>" \
			"<b>Android Version :</b><code> ${KERNEL_ANDROID_VER} </code>" \
   			"<b>Filename :</b><code> ${TELEGRAM_FILENAME}</code>" \
			"" \
			"=========== Kernel Information ================" \
			"<b>Kernel Scheduler : </b><code> ${KERNEL_SCHED} </code>" \
			"<b>Kernel Clock : </b><code> ${KERNEL_CLK_STR} ${KERNEL_DEVICE} </code>" \
			"<b>Kernel Tag : </b><code> ${KERNEL_CAF_TAG} </code>" \
			"<b>Kernel Branch : </b><code> ${KERNEL_BRANCH} </code>" \
			"<b>Kernel Linux Version:</b><code> Linux ${TELEGRAM_KERNEL_VER}</code>" \
			"<b>Kernel Release Ver :</b><code> ${KERNEL_REV} </code>" \
			"<b>Kernel Codename :</b><code> ${KERNEL_RELEASE_NAME} </code>" \
			"<b>Kernel Builder :</b><code> ${TELEGRAM_COMPILER_NAME}@${TELEGRAM_COMPILER_HOST}</code>" \
			"<b>Kernel Toolchain :</b><code> ${TELEGRAM_TOOLCHAIN_VER}</code>" \
			"<b>Kernel Build Date :</b><code> ${TELEGRAM_UTS_VER}</code>" \
			"" \
			"=========== Misc Information ==================" \
			"<b>Kernel Commit :</b><code> $(git --no-pager log --pretty=format:'"%h - %s (%an)"' -1)</code>" \
			"<b>CI Service :</b><code> ${KERNEL_BOT} </code>" \
			"<b>Compile Time :</b><code> $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)</code>" \
			"" \
			"<b>                         HANA-CI Build Project | 2016-2020                            </b>"
}

function bot_lave_compile() {
		telegram_init
		bot_template	"<b>---- ${KERNEL_REL} New Kernel ----</b>" \
				"<b>Device:</b> ${CODENAME} or ${TELEGRAM_DEVICE}" \
				"<b>Name:</b> <code>${KERNEL_REL}-${KVERSION}</code>" \
				"<b>Kernel Version:</b> <code>${TELEGRAM_KERNEL_VER}</code>" \
				"<b>Type:</b> <code>${KERNEL_SCHED}</code>" \
				"<b>Commit:</b> <code>$(git log --pretty=format:'%h : %s' -1)</code>" \
				"<b>Started on:</b> <code>$(hostname)</code>" \
				"<b>Compiler:</b> <code>${TELEGRAM_TOOLCHAIN_VER}</code>" \
				"<b>Started at</b> <code>${KERNEL_DATE}</code>"
}

# Telegram bot message || success notification
function bot_build_success() {
	bot_template	"<b>|| HANA-CI Build Bot ||</b>" \
			"" \
			"<b>${KERNEL_REL} Kernel build Success!</b>"
}

# Telegram bot message || failed notification
function bot_build_failed() {
	bot_template	"<b>|| HANA-CI Build Bot ||</b>" \
			"" \
			"<b>${KERNEL_REL} ${KERNEL_CLOCK} Kernel build Failed!</b>" \
			"" \
			"<b>Compile Time :</b><code> $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)</code>"
}

# Telegram sticker message
function sendStick() {
	curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_ID/sendSticker -d sticker="${1}" -d chat_id=$TELEGRAM_GROUP_ID &>/dev/null
}

# Compile Mido Begin
function compile_mido() {
	cd ${KERNEL}
	bot_first_compile
	cd ..
if [ "$KERNEL_OVERCLOCK" == "1" ] && [ "$KERNEL_UNDERVOLT" == "1" ];
	then
		sed -i -e 's/-キズナ/-キズナ-OC-UV-r6/g' ${KERNEL}/localversion
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_OVERCLOCKED=y/# CONFIG_MACH_XIAOMI_C6_OVERCLOCKED is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_DEFAULT=y/# CONFIG_MACH_XIAOMI_C6_DEFAULT is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_UNDERVOLT=y/# CONFIG_MACH_XIAOMI_C6_UNDERVOLT is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/# CONFIG_MACH_XIAOMI_C6_OC_UV is not set/CONFIG_MACH_XIAOMI_C6_OC_UV=y/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/# CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED is not set/CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED=y/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
elif [ "$KERNEL_OVERCLOCK" == "1" ] && [ "$KERNEL_UNDERVOLT" == "0" ];
	then
		sed -i -e 's/-キズナ/-キズナ-OC-r6/g' ${KERNEL}/localversion
		sed -i -e 's/# CONFIG_MACH_XIAOMI_C6_OVERCLOCKED is not set/CONFIG_MACH_XIAOMI_C6_OVERCLOCKED=y/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_DEFAULT=y/# CONFIG_MACH_XIAOMI_C6_DEFAULT is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_UNDERVOLT=y/# CONFIG_MACH_XIAOMI_C6_UNDERVOLT is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_OC_UV=y/# CONFIG_MACH_XIAOMI_C6_OC_UV is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/# CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED is not set/CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED=y/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
elif [ "$KERNEL_OVERCLOCK" == "0" ] && [ "$KERNEL_UNDERVOLT" == "1" ];
	then
		sed -i -e 's/-キズナ/-キズナ-UV-r6/g' ${KERNEL}/localversion
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_OVERCLOCKED=y/# CONFIG_MACH_XIAOMI_C6_OVERCLOCKED is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_DEFAULT=y/# CONFIG_MACH_XIAOMI_C6_DEFAULT is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/# CONFIG_MACH_XIAOMI_C6_UNDERVOLT is not set/CONFIG_MACH_XIAOMI_C6_UNDERVOLT=y/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_OC_UV=y/# CONFIG_MACH_XIAOMI_C6_OC_UV is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED=y/# CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
elif [ "$KERNEL_OVERCLOCK" == "0" ] && [ "$KERNEL_UNDERVOLT" == "0" ];
	then
		sed -i -e 's/-キズナ/-キズナ-r6/g' ${KERNEL}/localversion
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_UNDERVOLT=y/# CONFIG_MACH_XIAOMI_C6_UNDERVOLT is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/# CONFIG_MACH_XIAOMI_C6_DEFAULT is not set/CONFIG_MACH_XIAOMI_C6_DEFAULT=y/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_UNDERVOLT=y/# CONFIG_MACH_XIAOMI_C6_UNDERVOLT is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_OC_UV=y/# CONFIG_MACH_XIAOMI_C6_OC_UV is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED=y/# CONFIG_MACH_XIAOMI_C6_GPU_OVERCLOCKED is not set/g' ${KERNEL}/arch/arm64/configs/mido_defconfig
fi
	cat ${KERNEL}/localversion
	START=$(date +"%s")
	make -s -C ${KERNEL} vendor/${CODENAME}_defconfig O=out
if [ "$KERNEL_COMPILER" == "0" ];
	then
		CLANG_PATH="/root/proton/bin/:${PATH}"
elif [ "$KERNEL_COMPILER" == "1" ];
	then
		CLANG_PATH="/root/aosp-clang/bin/:/root/gcc-4.9/arm64/bin/:/root/gcc-4.9/arm/bin/:${PATH}"
fi
		PATH="$CLANG_PATH" \
		make -C ${KERNEL} -j$(nproc --all) -> ${KERNEL_TEMP}/compile.log O=out \
					CC=clang \
					AR=llvm-ar \
					NM=llvm-nm \
					STRIP=llvm-strip \
					OBJCOPY=llvm-objcopy \
					OBJDUMP=llvm-objdump \
					OBJSIZE=llvm-size \
					READELF=llvm-readelf \
					HOSTCC=clang \
					HOSTCXX=clang++ \
					HOSTAR=llvm-ar \
					CLANG_TRIPLE=aarch64-linux-gnu- \
					CROSS_COMPILE=aarch64-linux-gnu- \
					CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	if ! [ -a $IMAGE ];
		then
			echo "kernel not found"
			END=$(date +"%s")
			DIFF=$(($END - $START))
			cd ${KERNEL}
			bot_build_failed
			cd ..
			sendStick "${TELEGRAM_FAIL}"
			curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			exit 1
	fi
	END=$(date +"%s")
	DIFF=$(($END - $START))
	cd ${KERNEL}
	bot_build_success
	cd ..
	sendStick "${TELEGRAM_SUCCESS}"
	cp ${IMAGE} AnyKernel3
	anykernel
	kernel_upload
}

# Compile Lavender Begin
function compile_lave() {
	START=$(date +"%s")
	cd ${KERNEL}
	sed -i -e 's/CONFIG_ANDROID_NLMK=y/# CONFIG_ANDROID_NLMK is not set/g' ${KERNEL}/arch/arm64/configs/lavender_defconfig
if [ "$KERNEL_OVERCLOCK" == "0" ];
	then
		sed -i -e 's/# CONFIG_MACH_XIAOMI_LAVENDER_DEFAULT is not set/CONFIG_MACH_XIAOMI_LAVENDER_DEFAULT=y/g' ${KERNEL}/arch/arm64/configs/lavender_defconfig
		sed -i -e 's/CONFIG_MACH_XIAOMI_LAVENDER_OVERCLOCKED=y/# CONFIG_MACH_XIAOMI_LAVENDER_OVERCLOCKED is not set/g' ${KERNEL}/arch/arm64/configs/lavender_defconfig
elif [ "$KERNEL_OVERCLOCK" == "1" ];
	then
		sed -i -e 's/CONFIG_MACH_XIAOMI_LAVENDER_DEFAULT=y/# CONFIG_MACH_XIAOMI_LAVENDER_DEFAULT is not set/g' ${KERNEL}/arch/arm64/configs/lavender_defconfig
		sed -i -e 's/# CONFIG_MACH_XIAOMI_LAVENDER_OVERCLOCKED is not set/CONFIG_MACH_XIAOMI_LAVENDER_OVERCLOCKED=y/g' ${KERNEL}/arch/arm64/configs/lavender_defconfig
fi
	make vendor/${CODENAME}_defconfig O=out
if [ "$KERNEL_COMPILER" == "0" ];
	then
		CLANG_PATH="/root/proton/bin/:${PATH}"
elif [ "$KERNEL_COMPILER" == "1" ];
	then
		CLANG_PATH="/root/aosp-clang/bin/:/root/gcc-4.9/arm64/bin/:/root/gcc-4.9/arm/bin/:${PATH}"
fi
	PATH="$CLANG_PATH"
	make -j$(nproc --all) -> ${KERNEL_TEMP}/compile.log O=out \
					CC=clang \
					AR=llvm-ar \
					NM=llvm-nm \
					STRIP=llvm-strip \
					OBJCOPY=llvm-objcopy \
					OBJDUMP=llvm-objdump \
					OBJSIZE=llvm-size \
					READELF=llvm-readelf \
					HOSTCC=clang \
					HOSTCXX=clang++ \
					HOSTAR=llvm-ar \
					CLANG_TRIPLE=aarch64-linux-gnu- \
					CROSS_COMPILE=aarch64-linux-gnu- \
					CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	if ! [ -a $IMAGE ];
		then
			echo "kernel not found"
			END=$(date +"%s")
			DIFF=$(($END - $START))
			bot_build_failed
			sendStick "${TELEGRAM_FAIL}"
			curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			exit 1
	fi
	END=$(date +"%s")
	DIFF=$(($END - $START))
	cd ${KERNEL}
	bot_lave_compile
	bot_build_success
	sendStick "${TELEGRAM_SUCCESS}"
	cd ..
	cp ${IMAGE} ${ANYKERNEL}
	anykernel
	kernel_upload
	if [ "$KERNEL_NEW_CAM" == "0" ];
		then
			echo "Build Done :3"
	elif [ "$KERNEL_NEW_CAM" == "1" ];
		then
			if [ "$NEW_PATCH_STATS" == "0" ];
				then
					init_patch
			elif [ "$NEW_PATCH_STATS" == "1" ];
				then
					echo "Build Done :3"
			fi
	fi
}

# Camera patch
function init_patch() {

cd ${KERNEL}

sed -i -e 's/# CONFIG_MACH_XIAOMI_LAVENDER_NEWCAM is not set/CONFIG_MACH_XIAOMI_LAVENDER_F7A_NEWCAM=y/g' ${KERNEL}/arch/arm64/configs/lavender_defconfig

# Declare specified kernel name for pie patch
KVERSION="${FUSION_CODENAME}-New_CAM-$(git log --pretty=format:'%h' -1)-$(date "+%H%M")"
ZIP_NAME="${KERNEL_REL}-${FUSION_CODENAME}-${CODENAME}-New_CAM-$(git log --pretty=format:'%h' -1)-$(date "+%H%M").zip"

# Tell if new cam patch already executed
NEW_PATCH_STATS="1"

# Begin init compiling process
compile_lave
}

# AnyKernel
function anykernel() {
	if [ "$KERNEL_CODENAME" == "1" ];
		then
			cd ${ANYKERNEL}
			make -j4
			mv *.zip ${KERNEL_TEMP}/$ZIP_NAME
	elif [ "$KERNEL_CODENAME" == "0" ];
		then
			cd AnyKernel3
			make -j4
			if  [ "$KERNEL_NAME" == "0" ];
				then
					mv CAF-Kernel-${KERNEL_CODE}-signed.zip ${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip
			elif [ "$KERNEL_NAME" == "1" ];
				then
					if [ "$KERNEL_OVERCLOCK" == "0" ] && [ "$KERNEL_UNDERVOLT" == "0" ];
						then
							mv Kizuna-Kernel-4.9-${KERNEL_CODE}-signed.zip ${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip
					else
							mv Kizuna-Kernel-4.9-${KERNEL_CODE}-signed.zip ${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_CLOCK}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip
					fi
			fi
	fi
}

# Upload Kernel
function kernel_upload() {
	if [ "$KERNEL_CODENAME" == "0" ];
		then
			cd ${KERNEL}
			bot_complete_compile
			if [ "$KERNEL_STATE" == "0" ];
				then
					# Switch to root directory
					cd ..

					# Upload kernel file
					echo "Upload kernel..."

					if [ "$KERNEL_OVERCLOCK" == "0" ] && [ "$KERNEL_UNDERVOLT" == "0" ];
						then
							curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
					else
							curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_CLOCK}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
					fi

					echo "Upload log..."
					curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			elif [ "$KERNEL_STATE" == "1" ];
				then
					# Switch to root directory
					cd ..

					# Upload kernel file
					echo "Upload kernel file..."

					if [ "$KERNEL_OVERCLOCK" == "0" ] && [ "$KERNEL_UNDERVOLT" == "0" ];
						then
							curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
					else
							curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/${KERNEL_REL}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_CLOCK}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
					fi
			fi
	elif [ "$KERNEL_CODENAME" == "1" ];
		then
			if [ "$KERNEL_STATE" == "0" ];
				then
					# Upload kernel file
					echo "Upload kernel file..."
					curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/$ZIP_NAME" https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument

					echo "Upload log file..."
					curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			else
				# Upload kernel file
				echo "Upload kernel file..."
				curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/$ZIP_NAME" https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			fi
	fi
}

function run() {
if [ "$KERNEL_CODENAME" == "1" ];
	then
		echo "LAVENDER"

		env_init
		lave_init
		clang_init
		add_init
		if [ "$KERNEL_NEW_CAM" == "1" ];
			then
				# Tell if new cam patch need to executed
				NEW_PATCH_STATS="0"

				# Compile
				compile_lave
		elif [ "$KERNEL_NEW_CAM" == "0" ];
			then
				compile_lave
		fi
elif [ "$KERNEL_CODENAME" == "0" ];
	then
		echo "MIDO"

		env_init
		mido_init
		clang_init
		add_init
		compile_mido
fi
}

# Running
run
